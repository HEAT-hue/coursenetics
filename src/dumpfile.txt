// jshint esversion:6
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm, SubmitHandler } from "react-hook-form";
import { FormInput, FormSelect, FormInputTest } from "./form";

// Create User Schema for form data validation
const schema = z
    .object({
        firstname: z.string().nonempty({ message: "First name is required" }),
        lastname: z.string().nonempty({ message: "Last name is required" }),
        username: z.string().nonempty({ message: "Username is required" }).min(5, { message: "Username must be at least 5 characters" }),
        tel: z.string().length(11, { message: "Enter 11 digits of your phone number" }),
        gender: z.string(),
        education: z.string(),
    })

// Extract inferred type from schema
type FormData = z.infer<typeof schema>

function UserRegForm() {

    const { register, handleSubmit, formState: { errors } } = useForm<FormData>({ resolver: zodResolver(schema) });

    // Submit form
    const onSubmit: SubmitHandler<FormData> = (data) => console.log(data);

    return (
        <>
            <div>
                <form onSubmit={handleSubmit(onSubmit)}>
                    <div className="max-w-[600px] w-full mx-auto flex flex-col items-center">
                        <h1 className="text-pry font-bold text-3xl">Complete Registration</h1>

                        {/* Form fields */}
                        <div className="mt-[2rem] flex flex-col w-full gap-y-5">
                            <div className="grid grid-cols-[repeat(auto-fill,_minmax(200px,_1fr))] gap-x-2 gap-y-5">
                                <FormInputTest type="text" placeholder="First Name" {...register("firstname")} error={errors?.firstname?.message} />
                                <FormInputTest type="text" placeholder="Last Name" {...register("lastname")} error={errors?.lastname?.message} />
                                {/* <div>
                                    <p className="text-sm text-red-700 font-mono">{errors?.firstname?.message}</p>
                                    <div className="flex h-[3rem] w-full relative">
                                    </div>
                                </div> */}
                                {/* <div>
                                    <p className="text-sm text-red-700 font-mono">{errors?.firstname?.message}</p>
                                    <div className="flex h-[3rem] w-full relative">
                                        <FormInput type="text" placeholder="First Name" {...register("firstname")} error={errors?.firstname?.message} />
                                    </div>
                                </div> */}
                                {/* <div>
                                    <p className="text-sm text-red-700 font-mono">{errors?.lastname?.message}</p>
                                    <div className="flex h-[3rem] w-full relative">
                                        <FormInput type="text" placeholder="Last name" {...register("lastname")} error={errors?.lastname?.message} />
                                    </div>
                                </div> */}
                            </div>
                            <FormInputTest type="text" placeholder="Last Name" {...register("username")} error={errors?.username?.message} />
                            <FormInputTest type="text" placeholder="Last Name" {...register("tel")} error={errors?.tel?.message} />
                            {/* <div>
                                <p className="text-sm text-red-700 font-mono">{errors?.username?.message}</p>
                                <div className="flex h-[3rem] w-full relative">
                                    <FormInput type="text" placeholder="Username" {...register("username")} error={errors?.username?.message} />
                                </div>
                            </div> */}
                            {/* <div>
                                <p className="text-sm text-red-700 font-mono">{errors?.tel?.message}</p>
                                <div className="flex h-[3rem] w-full relative">
                                    <FormInput type="tel" placeholder="Phone number" {...register("tel")} error={errors?.tel?.message} />
                                </div>
                            </div> */}
                            <div className="grid grid-cols-[repeat(auto-fill,_minmax(200px,_1fr))] gap-x-2 gap-y-5">
                                <div>
                                    <p className="text-sm text-red-700 font-mono">{errors?.gender?.message}</p>
                                    <div className="flex h-[3rem] w-full relative">
                                        <FormSelect {...register("gender")} defaultOption="Gender" selectOptions={[{ label: "Male", value: "male" }, { label: "Female", value: "female" }]} />
                                    </div>
                                </div>
                                <div>
                                    <p className="text-sm text-red-700 font-mono">{errors?.education?.message}</p>
                                    <div className="flex h-[3rem] w-full relative">
                                        <FormSelect {...register("education")} defaultOption="Education" selectOptions={[{ label: "Primary", value: "primary" }, { label: "Secondary", value: "secondary" }, { label: "College", value: "College" }, { label: "Self", value: "self" }]} />
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Form submit buttons */}
                        <button type="submit" className="self-end w-full px-9 py-3 bg-pry text-[white] rounded mt-8">Submit</button>
                    </div>
                </form>

            </div>
        </>
    );
}
export { UserRegForm };

// // jshint esversion:6
// import React from "react"
// import { ChangeHandler } from "react-hook-form";

// const FormInputTest = React.forwardRef<
//     HTMLInputElement,
//     { type: string, error: string | undefined, placeholder: string, name: string, onChange: ChangeHandler, onBlur: ChangeHandler }>(({ onChange, onBlur, type, error, placeholder, name }, ref) => {
//         return (
//             <div>
//                 <p className="text-sm text-red-700 font-mono">{error}</p>
//                 <div className="flex h-[3rem] w-full relative">
//                     <input
//                         className={`rounded w-full h-full px-[1rem] pr-2 text-[black] bg-gray-200 border-2 text-[1rem] outline-none ${!error ? "focus:border-pry" : "border-red-700"}`}
//                         type={type}
//                         placeholder={placeholder}
//                         name={name}
//                         ref={ref}
//                         onChange={onChange}
//                         onBlur={onBlur}
//                     />
//                 </div>
//             </div>

//         );
//     })

// export { FormInputTest };

// // jshint esversion:6
// import React from "react";
// import { ChangeHandler } from "react-hook-form";

// interface optionType {
//     label: string
//     value: string
// }

// type selectOptionsType = optionType[]

// const FormSelectTest = React.forwardRef<HTMLSelectElement, { error: string | undefined, onChange: ChangeHandler, onBlur: ChangeHandler, name: string, defaultOption: string, selectOptions: selectOptionsType }>(({ onChange, onBlur, name, error, defaultOption, selectOptions }, ref) => {
//     return (
//         <div>
//             <p className="text-sm text-red-700 font-mono">{error}</p>
//             <div className="flex h-[3rem] w-full relative">
//                 <select
//                     name={name}
//                     ref={ref}
//                     onChange={onChange}
//                     onBlur={onBlur}
//                     className={`rounded w-full h-full px-[1rem] pr-2 text-[black] bg-gray-200 border-2 text-[1rem] outline-none focus:border-pry`}
//                 >
//                     <option value="" disabled selected>{defaultOption}</option>
//                     {
//                         selectOptions.map((optionData) => {
//                             return (
//                                 <option value={optionData.value}>{optionData.label}</option>
//                             );
//                         })
//                     }
//                 </select>
//             </div>
//         </div>

//     );
// })

// export { FormSelectTest };


{/* <div>
                                <p className="text-sm text-red-700 font-mono">{errors?.email?.message}</p>
                                <div className="flex h-[3rem] w-full relative">
                                    <div className=" absolute left-[5px] h-full max-w-content flex items-center px-[5px] text-pry"><EmailSVG size={20} /></div>
                                    <input className={`rounded w-full h-full pl-[3rem] pr-2 text-[black] bg-gray-200 border-2 text-[1rem] outline-none ${!errors?.email ? "focus:border-pry" : "border-red-700" }`} type="email" placeholder="Email" {...register("email")} />
                                </div>
                            </div> */}